$date
	Fri Jun 25 17:50:34 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module BUF $end
$var wire 1 ! A $end
$var wire 1 " Y $end
$upscope $end
$scope module BancoPrueba $end
$var wire 1 # wr_enb $end
$var wire 3 $ wr_addr [2:0] $end
$var wire 1 % rst $end
$var wire 1 & rd_enb $end
$var wire 3 ' rd_addr [2:0] $end
$var wire 10 ( data_out [9:0] $end
$var wire 10 ) data_in [9:0] $end
$var wire 1 * clk $end
$scope module memory $end
$var wire 1 # wr_enb $end
$var wire 3 + wr_addr [2:0] $end
$var wire 1 % rst $end
$var wire 1 & rd_enb $end
$var wire 3 , rd_addr [2:0] $end
$var wire 10 - data_in [9:0] $end
$var wire 1 * clk $end
$var reg 10 . data_out [9:0] $end
$var integer 32 / i [31:0] $end
$upscope $end
$scope module probador1 $end
$var wire 10 0 data_out [9:0] $end
$var reg 1 * clk $end
$var reg 10 1 data_in [9:0] $end
$var reg 3 2 rd_addr [2:0] $end
$var reg 1 & rd_enb $end
$var reg 1 % rst $end
$var reg 3 3 wr_addr [2:0] $end
$var reg 1 # wr_enb $end
$upscope $end
$upscope $end
$scope module DFF $end
$var wire 1 4 C $end
$var wire 1 5 D $end
$var reg 1 6 Q $end
$upscope $end
$scope module DFFSR $end
$var wire 1 7 C $end
$var wire 1 8 D $end
$var wire 1 9 R $end
$var wire 1 : S $end
$var reg 1 ; Q $end
$upscope $end
$scope module NAND $end
$var wire 1 < A $end
$var wire 1 = B $end
$var wire 1 > Y $end
$upscope $end
$scope module NOR $end
$var wire 1 ? A $end
$var wire 1 @ B $end
$var wire 1 A Y $end
$upscope $end
$scope module NOT $end
$var wire 1 B A $end
$var wire 1 C Y $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
zC
zB
xA
z@
z?
x>
z=
z<
x;
z:
z9
z8
z7
x6
z5
z4
b0 3
b0 2
b11111111 1
b0 0
bx /
b0 .
b11111111 -
b0 ,
b0 +
1*
b11111111 )
b0 (
b0 '
0&
1%
b0 $
0#
z"
z!
$end
#1
0*
#2
1*
#3
0*
#4
1#
1*
#5
0*
#6
b11111111 (
b11111111 .
b11111111 0
1&
b11001100 )
b11001100 -
b11001100 1
1*
#7
0*
#8
bx (
bx .
bx 0
b10 $
b10 +
b10 3
b1 '
b1 ,
b1 2
1*
#9
0*
#10
b11001100 (
b11001100 .
b11001100 0
b0 '
b0 ,
b0 2
0#
1*
#11
0*
#12
1*
#13
0*
#14
1*
#15
0*
#16
1*
#17
0*
#18
1*
